%% getEffectiveThermalProps
%
%

function [AN , SEP , CA] = getEffectiveThermalProps(AN , SEP , CA , EL)
    % Density
        AN.rho_eff  = AN.eps_el   *  EL.rho ...
                    + AN.eps_ed   *  AN.rho ...
                    + AN.eps_b    *  AN.rho;
    
        SEP.rho_eff = SEP.eps_el  *  EL.rho ...
                    + SEP.eps_sep * SEP.rho;
    
        CA.rho_eff  = CA.eps_el   *  EL.rho ...
                    + CA.eps_ed   *  CA.rho ...
                    + CA.eps_b    *  CA.rho;

    % Specific Heat Capacity
        AN.c_p_eff  = (AN.eps_el   *  EL.rho*  EL.c_p ...
                     + AN.eps_ed   *  AN.rho*  AN.c_p ...
                     + AN.eps_b    *  AN.rho*  AN.c_p)...
                     / AN.rho_eff;
    
        SEP.c_p_eff = (SEP.eps_el  *  EL.rho*  EL.c_p ...
                     + SEP.eps_sep * SEP.rho* SEP.c_p)...
                     / SEP.rho_eff;
    
        CA.c_p_eff  = (CA.eps_el   *  EL.rho*  EL.c_p ...
                     + CA.eps_ed   *  CA.rho*  CA.c_p ...
                     + CA.eps_b    *  CA.rho*  CA.c_p)...
                     / CA.rho_eff;
    
    % Thermal Conductivity
        AN.lambda_eff  = (AN.eps_el   *  EL.rho*  EL.lambda ...
                        + AN.eps_ed   *  AN.rho*  AN.lambda ...
                        + AN.eps_b    *  AN.rho*  AN.lambda)...
                        / AN.rho_eff;
    
        SEP.lambda_eff = (SEP.eps_el  *  EL.rho*  EL.lambda ...
                        + SEP.eps_sep * SEP.rho* SEP.lambda)...
                        / SEP.rho_eff;
    
        CA.lambda_eff  = (CA.eps_el   *  EL.rho*  EL.lambda ...
                        + CA.eps_ed   *  CA.rho*  CA.lambda ...
                        + CA.eps_b    *  CA.rho*  CA.lambda)...
                        / CA.rho_eff;
end